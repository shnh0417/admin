/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, Suspense } from 'react';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';
import { useGLTF } from '@react-three/drei';
// import { useLoader } from '@react-three/fiber';

function Model({ props }) {
   const groupRef = useRef();
   const { nodes, materials, scene } = useGLTF(require('assets/glb/kima_GLTF.glb'));
   // const obj = useLoader(OBJLoader, require('assets/glb/kima.obj'));
   // return <primitive object={obj} />;
   return (
      <Suspense fallback={<span>Loading...</span>}>
         <primitive object={scene} scale={2} {...props} position={[0, -3.3, -0.05]} />
      </Suspense>
   );
   // return (
   //    <group ref={groupRef} {...props} dispose={null}>
   //       {/* <mesh
   //          castShadow
   //          receiveShadow
   //          geometry={nodes.mesh_helmet_LP_13930damagedHelmet.geometry}
   //          material={materials.Material_MR}
   //          position={[-0.28, 1.68, -0.05]}
   //          rotation={[-0.04, 0, 0]}
   //          scale={0.15}></mesh> */}
   //       {/* <group scale={[1, 1, 1.8]} position={[0.16, -0.1, 4.81]} rotation={[-0.1, 0.1, 0]} dispose={null}> */}
   //       <group scale={0.01} dispose={null}>
   //          <mesh castShadow receiveShadow geometry={nodes.Mesh.geometry} material={materials.face} />
   //          <mesh castShadow receiveShadow geometry={nodes.Mesh_1.geometry} material={materials.eye} />
   //          <mesh castShadow receiveShadow geometry={nodes.Mesh_2.geometry} material={materials.hair} />
   //       </group>
   //    </group>
   // );
}

useGLTF.preload(require('assets/glb/kima_GLTF.glb'));

export default Model;
